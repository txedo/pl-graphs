grammar graphs
{
	analysis LALR1;
	terminal graph, node, edge, operadorUnario, operadorBinario, operadorQuinario;
	terminal l_bracket, r_bracket, l_paren, r_paren;
	terminal semicolon, comma, equal, connector, ident, number, op;
	nonterminal SYNTAX, GRAPHS_SET, GRAPH, BODY, DECL, DECL_NODES, DECL_EDGES;
	nonterminal IDENTS, IDENTS_NODE, IDENTS_SIMPLE, IDENTS_WEIGHTED, ARCS, ARC, OPS_GEN, OPS, OP, OP1, OP2, OP5;
	
	SYNTAX		:=      GRAPHS_SET
			|  DECL GRAPHS_SET 
			;
	GRAPHS_SET 	:= GRAPH 
			|  GRAPH GRAPHS_SET
			;
	GRAPH 		:= graph ident l_bracket BODY r_bracket
			;
	BODY 		:= DECL ARCS OPS 
			|  OPS_GEN   OPS
			;
	DECL 		:= DECL_NODES 
			|   DECL_EDGES
			;
	DECL_NODES 	:= node IDENTS_NODE semicolon
			|   node IDENTS_NODE semicolon DECL
			;
	IDENTS_NODE	:= ident
			|   ident comma IDENTS_NODE
			;
	DECL_EDGES 	:= edge IDENTS semicolon
			|   edge IDENTS semicolon DECL 
			;
	IDENTS		:= IDENTS_SIMPLE
			|   IDENTS_WEIGHTED
			;
	IDENTS_SIMPLE	:= ident
			|   ident comma IDENTS
			;
	IDENTS_WEIGHTED	:= ident l_paren number r_paren 
			|   ident l_paren number r_paren comma IDENTS
			;
	ARCS 		:= ARC
			|  ARC ARCS
			;
	ARC 		:= ident equal ident connector ident semicolon 
			;
	OPS_GEN 	:= OP5 semicolon
			;
	OPS 		:= op OP
			|  OPS op OP
			;
	OP 		:= OP1 semicolon 
			|  OP2 semicolon
			;
	OP1 		:= operadorUnario   l_paren ident                                                 r_paren
			;
	OP2 		:= operadorBinario  l_paren ident comma ident                                     r_paren
			;
	OP5 		:= operadorQuinario l_paren ident comma ident comma ident comma ident comma ident r_paren
			;	
}