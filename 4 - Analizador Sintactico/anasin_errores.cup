/* Especificaciones de package e imports */
import java_cup.runtime.*;

/* Componentes de codigo de usuario */
parser code {:
	public void report_error (String message, Object info) {
		StringBuffer m = new StringBuffer("Error");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" en la linea "+(s.left));
				if (s.right >= 0)
					m.append(", columna "+(s.right));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message,info);
		System.exit(1);
	}
:};


/* Lista de simbolos de la gramatica (terminales y no terminales) */
terminal graph, node, edge, operadorUnario, operadorBinario, operadorQuinario;
terminal l_bracket, r_bracket, l_paren, r_paren;
terminal semicolon, comma, equal, connector, ident, number;
non terminal SYNTAX, GRAPHS_SET, GRAPH, BODY, DECL, DECL_NODES, DECL_EDGES;
non terminal IDENTS, IDENTS_NODE, IDENTS_SIMPLE, IDENTS_WEIGHTED, ARCS, ARC, OPS_GEN, OPS, OP, OP1, OP2, OP5;

/* Declaraciones de precedencia */


/* Especificación de la gramatica */
SYNTAX		::=      GRAPHS_SET
		|   DECL GRAPHS_SET 
		;
GRAPHS_SET 	::= GRAPH 
		|   GRAPH GRAPHS_SET
		;
GRAPH 		::= graph ident l_bracket BODY r_bracket semicolon
		| error ident l_bracket BODY r_bracket semicolon
			{: parser.report_error("Error de sintaxis: La definicion del grafo debe iniciarse con la palabra reservada graph",null); :}
		| error l_bracket BODY r_bracket semicolon
			{: parser.report_error("Error de sintaxis: No existe identificador de grafo",null); :}
		| error r_bracket semicolon
			{: parser.report_error("Error de sintaxis: No se encuentra la apertura de bloque en la definicion del grafo",null); :}
		| error semicolon
			{: parser.report_error("Error de sintaxis: No se encuentra el cierre de bloque en la definicion del grafo",null); :}
		| error
			{: parser.report_error("Error de sintaxis. Es necesario finalizar la definicion del grafo con el caracter punto y coma",null); :}
		;
BODY 		::= DECL ARCS OPS 
		|   OPS_GEN   OPS
		;
DECL 		::= DECL_NODES 
		|   DECL_EDGES
		;
DECL_NODES 	::= node IDENTS_NODE semicolon
		|   node IDENTS_NODE semicolon DECL
		;
IDENTS_NODE	::= ident
		|   ident comma IDENTS_NODE
		;
DECL_EDGES 	::= edge IDENTS semicolon
		|   edge IDENTS semicolon DECL 
		;
IDENTS		::= IDENTS_SIMPLE
		|   IDENTS_WEIGHTED
		;
IDENTS_SIMPLE	::= ident
		|   ident comma IDENTS
		;
IDENTS_WEIGHTED	::= ident l_paren number r_paren 
		|   ident l_paren number r_paren comma IDENTS
		;
ARCS 		::= ARC
		|   ARC ARCS
		| error ARCS
			{: parser.report_error("Error de sintaxis. Se esperaba el caracter ;",null); :}
		| error
			{: parser.report_error("Error de sintaxis. Se esperaba el caracter ;",null); :}
		;
ARC 		::= ident equal ident connector ident semicolon 
		| error equal ident connector ident semicolon
			{: parser.report_error("Error de sintaxis. Se esperaba un identificador de arista",null); :}
		| error ident connector ident semicolon
			{: parser.report_error("Error de sintaxis. Se esperaba el caracter =",null); :}
		| error connector ident semicolon
			{: parser.report_error("Error de sintaxis. Se esperaba un identificador de nodo",null); :}
		| error ident semicolon
			{: parser.report_error("Error de sintaxis. Se esperaba un conector",null); :}
		| error semicolon
			{: parser.report_error("Error de sintaxis. Se esperaba un identificador de nodo",null); :}
		;
OPS_GEN 	::= OP5 semicolon
		;
OPS 		::= OP
		|   OP OPS
		;
OP 		::= OP1 semicolon 
		|   OP2 semicolon
		;
OP1 		::= operadorUnario   l_paren ident                                                 r_paren
		;
OP2 		::= operadorBinario  l_paren ident comma ident                                     r_paren
		;
OP5 		::= operadorQuinario l_paren ident comma ident comma ident comma ident comma ident r_paren
		;


