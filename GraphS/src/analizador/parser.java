
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 18 02:21:49 CEST 2009
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import dominio.*;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Enumeration;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 18 02:21:49 CEST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\025\002\000\002\003\004\000\002\002" +
    "\004\000\002\026\002\000\002\003\005\000\002\024\003" +
    "\000\002\027\002\000\002\024\005\000\002\023\007\000" +
    "\002\023\003\000\002\017\005\000\002\017\004\000\002" +
    "\017\003\000\002\002\003\000\002\002\003\000\002\004" +
    "\005\000\002\004\006\000\002\006\003\000\002\006\005" +
    "\000\002\005\005\000\002\005\006\000\002\007\003\000" +
    "\002\007\003\000\002\010\003\000\002\010\005\000\002" +
    "\011\006\000\002\011\010\000\002\012\003\000\002\012" +
    "\004\000\002\013\010\000\002\013\003\000\002\014\004" +
    "\000\002\016\004\000\002\016\005\000\002\020\004\000" +
    "\002\020\004\000\002\020\003\000\002\021\006\000\002" +
    "\022\010\000\002\015\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\012\003\001\004\001\005\007\006\010\001" +
    "\002\000\004\002\132\001\002\000\006\003\040\004\042" +
    "\001\002\000\006\003\ufffe\004\ufffe\001\002\000\004\022" +
    "\031\001\002\000\004\022\015\001\002\000\010\003\ufff4" +
    "\004\ufff4\022\ufff4\001\002\000\010\003\ufff3\004\ufff3\022" +
    "\ufff3\001\002\000\004\017\026\001\002\000\004\017\uffeb" +
    "\001\002\000\010\015\020\017\uffea\020\017\001\002\000" +
    "\004\017\uffec\001\002\000\004\022\015\001\002\000\004" +
    "\024\021\001\002\000\004\016\022\001\002\000\006\017" +
    "\uffe8\020\023\001\002\000\004\022\015\001\002\000\004" +
    "\017\uffe7\001\002\000\004\017\uffe9\001\002\000\014\003" +
    "\uffee\004\uffee\005\007\006\010\022\uffee\001\002\000\010" +
    "\003\uffed\004\uffed\022\uffed\001\002\000\004\017\034\001" +
    "\002\000\006\017\ufff0\020\032\001\002\000\004\022\031" +
    "\001\002\000\004\017\uffef\001\002\000\014\003\ufff2\004" +
    "\ufff2\005\007\006\010\022\ufff2\001\002\000\010\003\ufff1" +
    "\004\ufff1\022\ufff1\001\002\000\006\003\040\004\042\001" +
    "\002\000\004\002\ufffd\001\002\000\010\002\ufff8\003\ufff8" +
    "\004\ufff8\001\002\000\010\002\ufffc\003\ufffb\004\ufffb\001" +
    "\002\000\004\022\043\001\002\000\004\013\044\001\002" +
    "\000\012\003\052\005\007\006\010\012\046\001\002\000" +
    "\004\017\126\001\002\000\004\015\113\001\002\000\004" +
    "\007\066\001\002\000\004\014\111\001\002\000\006\003" +
    "\055\022\056\001\002\000\004\014\ufff5\001\002\000\004" +
    "\007\066\001\002\000\010\003\055\007\uffe6\022\056\001" +
    "\002\000\010\003\uffe3\007\uffe3\022\uffe3\001\002\000\004" +
    "\021\057\001\002\000\004\022\060\001\002\000\004\023" +
    "\061\001\002\000\004\022\062\001\002\000\004\017\063" +
    "\001\002\000\010\003\uffe4\007\uffe4\022\uffe4\001\002\000" +
    "\004\007\uffe5\001\002\000\006\007\107\014\ufff7\001\002" +
    "\000\010\003\072\010\074\011\070\001\002\000\006\007" +
    "\uffe1\014\uffe1\001\002\000\004\015\102\001\002\000\004" +
    "\017\101\001\002\000\006\007\uffdd\014\uffdd\001\002\000" +
    "\004\017\100\001\002\000\004\015\075\001\002\000\004" +
    "\022\076\001\002\000\004\016\077\001\002\000\004\017" +
    "\uffdc\001\002\000\006\007\uffdf\014\uffdf\001\002\000\006" +
    "\007\uffde\014\uffde\001\002\000\004\022\103\001\002\000" +
    "\004\020\104\001\002\000\004\022\105\001\002\000\004" +
    "\016\106\001\002\000\004\017\uffdb\001\002\000\010\003" +
    "\072\010\074\011\070\001\002\000\006\007\uffe0\014\uffe0" +
    "\001\002\000\010\002\ufff9\003\ufff9\004\ufff9\001\002\000" +
    "\006\007\107\014\ufff6\001\002\000\004\022\114\001\002" +
    "\000\004\020\115\001\002\000\004\022\116\001\002\000" +
    "\004\020\117\001\002\000\004\022\120\001\002\000\004" +
    "\020\121\001\002\000\004\022\122\001\002\000\004\020" +
    "\123\001\002\000\004\022\124\001\002\000\004\016\125" +
    "\001\002\000\004\017\uffda\001\002\000\004\007\uffe2\001" +
    "\002\000\006\003\040\004\042\001\002\000\004\002\ufffa" +
    "\001\002\000\004\002\000\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\014\002\005\003\003\004\010\005\011\025" +
    "\004\001\001\000\002\001\001\000\006\023\040\024\130" +
    "\001\001\000\004\026\035\001\001\000\004\006\027\001" +
    "\001\000\010\007\012\010\015\011\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\024" +
    "\010\015\011\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\023\010\015\011\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\026\004\010\005\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\032\001\001\000" +
    "\002\001\001\000\010\002\034\004\010\005\011\001\001" +
    "\000\002\001\001\000\006\023\040\024\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\050\004" +
    "\010\005\011\014\046\015\044\017\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\111\001\001\000" +
    "\002\001\001\000\006\012\052\013\053\001\001\000\002" +
    "\001\001\000\004\016\064\001\001\000\006\012\063\013" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\066\021\072\022\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\107" +
    "\021\072\022\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\040\024\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static final int GLOBAL = 0;
	public static final int LOCAL = 1;
    public static final int NODE = 0;
    public static final int EDGE = 1;
    public static final int GRAPH = 2;

	public int ambito = GLOBAL;
    public boolean dirigido = false;
    public boolean no_dirigido = false;
    public boolean valorado = false;
    public boolean no_valorado = false;
    public boolean errorAnalisis = false;

    private ArrayList<Graph> grafos = new ArrayList<Graph>();
    private String mensajes = new String("");

    public ArrayList<Graph> getGrafos () {
        return grafos;
    }

    public void setGrafos (ArrayList<Graph> lg) {
        grafos = lg;
    }

    public String getMensajes() {
        return mensajes;
    }

	private Hashtable<ClaveTS, EntradaTS> tablaSimbolos = new Hashtable<ClaveTS, EntradaTS>();

	public void borrarTS() {
		tablaSimbolos.clear();
	}

	public boolean existeSimbolo(ClaveTS clave) {
		return tablaSimbolos.containsKey(clave);
	}

    public boolean existeSimbolo(String identificador, int scope) {
        ClaveTS c = new ClaveTS(identificador, scope);
		return tablaSimbolos.containsKey((ClaveTS)c);
	}

	public Hashtable<ClaveTS, EntradaTS> getTabla() {
		return tablaSimbolos;
	}

	public void insertarSimbolo(String nombre, int scope, Object objeto) {
        ClaveTS c = new ClaveTS(nombre, scope);
        EntradaTS e = new EntradaTS(objeto, 0);
		tablaSimbolos.put(c, e);
	}

	public void insertarSimbolo(String nombre, int scope, Object objeto, int timesUsed) {
        ClaveTS c = new ClaveTS(nombre, scope);
        EntradaTS e = new EntradaTS(objeto, timesUsed);
		tablaSimbolos.put(c, e);
	}

    public void insertarSimbolo(ClaveTS c, EntradaTS e) {
		tablaSimbolos.put(c, e);
	}

	public EntradaTS obtenerSimbolo(String nombre, int scope) {
        ClaveTS c = new ClaveTS(nombre, scope);
		return tablaSimbolos.get(c);
	}

    public EntradaTS obtenerSimbolo(ClaveTS clave) {
		return tablaSimbolos.get(clave);
	}

	public int obtenerTipoSimbolo(String nombre) {
		return tablaSimbolos.get(nombre).getTipo();
	}

    public void mostrarError (String mensaje, int fila, int columna) {
        errorAnalisis = true;
        mensajes += fila + ":" + columna + " Semantic error: " + mensaje + "\n";
    }

    public void mostrarWarning (String mensaje) {
        mensajes += "Warning: " + mensaje + "\n";
    }

    public void mostrarWarning (String mensaje, int fila, int columna) {
        mensajes += fila + ":" + columna + " Warning: " + mensaje + "\n";
    }


    public void resetearAnalisis (){
        Enumeration<ClaveTS> elements;
        ClaveTS clave;
        EntradaTS entrada;
        Edge aristaAux = null;
        Node nodoAux = null;

        dirigido = false;
        no_dirigido = false;
        valorado = false;
        no_valorado = false;
        errorAnalisis = false;
        elements = tablaSimbolos.keys();
        while (elements.hasMoreElements()) {
            clave = elements.nextElement();
            entrada = tablaSimbolos.get(clave);
            if (clave.getScope() == LOCAL) {
                if (entrada.getTimesUsed() == 0) { //Warning
                    if (entrada.getTipo() == EDGE) {
                        aristaAux = (Edge)entrada.getVariable();
                        mostrarWarning ("Edge " + aristaAux.getName() + " not used. Assuming it does not exist.");
                    }
                    else { // NODE
                        nodoAux = (Node)entrada.getVariable();
                        mostrarWarning ("Node " + nodoAux.getName() + " not used. Assuming it does not exist.");
                    }
                }
                tablaSimbolos.remove(clave);
            }
            else { // GLOBAL
                // reseteamos las veces usadas
                entrada.setTimesUsed(0);
                if (entrada.getTipo() == EDGE) {
                    Edge e = (Edge)entrada.getVariable();
                    e.setFrom(null);
                    e.setTo(null);
                    e.setWeight(0);
                }
            }
        }
    }

	public void report_error (String message, Object info) {
		StringBuffer m = new StringBuffer("");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(""+(s.left));
				if (s.right >= 0)
					m.append(":"+(s.right)+" ");
			}
		}
		m.append(message);
		System.err.println(m);
        mensajes += m + "\n";
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message,info);
		//System.exit(1);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP5 ::= operadorQuinario l_paren ident comma ident comma ident comma ident comma ident r_paren 
            {
              Object RESULT =null;
		int identificador_operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int identificador_operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object identificador_operacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int identificador_grafo_origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int identificador_grafo_origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String identificador_grafo_origen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int identificador_grafo_destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identificador_grafo_destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String identificador_grafo_destino = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int identificador_nodo_origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identificador_nodo_origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String identificador_nodo_origen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int identificador_nodo_destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificador_nodo_destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identificador_nodo_destino = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identificador_aristaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificador_aristaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String identificador_arista = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                EntradaTS entrada = null;
                Graph sourceGraph = null;
                Graph targetGraph = null;
                Node source = null;
                Node target = null;
                Edge edge = null;
                Graph graphAux = null;
                Node nodeAux = null;
                Edge edgeAux = null;
                if (parser.existeSimbolo(identificador_grafo_origen, parser.GLOBAL)) {
                    entrada = parser.obtenerSimbolo(identificador_grafo_origen, parser.GLOBAL);
                    if (entrada.getTipo() == parser.GRAPH)
                        sourceGraph = (Graph)entrada.getVariable();
                    else parser.mostrarError("First param " + identificador_grafo_origen + " must be a graph.", identificador_grafo_origenleft, identificador_grafo_origenright);
                    // Comprobamos que existe el grafo 2
                    if (parser.existeSimbolo(identificador_grafo_destino, parser.GLOBAL)) {
                        entrada = parser.obtenerSimbolo(identificador_grafo_destino, parser.GLOBAL);
                        if (entrada.getTipo() == parser.GRAPH) {
                            targetGraph = (Graph)entrada.getVariable();
                            if ((sourceGraph.isDirected() && targetGraph.isDirected()) || (!sourceGraph.isDirected() && !targetGraph.isDirected())) {
                                if ((sourceGraph.isWeighted() && !targetGraph.isWeighted()) || (!sourceGraph.isWeighted() && targetGraph.isWeighted()))
                                    parser.mostrarWarning("Both " + identificador_grafo_origen + " and " + identificador_grafo_destino + " are not weighted.", identificador_grafo_origenleft, identificador_grafo_destinoright);
                                // Comprobamos que existe el nodo origen en sourceGraph, si existe es porque el grafo es conexo
                                if (sourceGraph.hasNode(identificador_nodo_origen)) {
                                    source = (Node)sourceGraph.getNode(identificador_nodo_origen);
                                    // Comprobamos que existe el nodo destino en targetGraph
                                    if (targetGraph.hasNode(identificador_nodo_destino)) {
                                        target = (Node)targetGraph.getNode(identificador_nodo_destino);
                                        // Comprobamos que existe la arista globalmente
                                        if (parser.existeSimbolo(identificador_arista, parser.GLOBAL)) {
                                            entrada = parser.obtenerSimbolo(identificador_arista, parser.GLOBAL);
                                            if (entrada.getTipo() == parser.EDGE) {
                                                edge = (Edge)entrada.getVariable();
                                                // como se cumplen todas las condiciones...
                                                graphAux = Graph.Union(sourceGraph, targetGraph, source, target, edge);
                                                for (Node n : graphAux.getNodes()) {
                                                    nodeAux = (Node)n;
                                                    parser.insertarSimbolo(nodeAux.getName(), parser.LOCAL, nodeAux, 1);
                                                }
                                                for (Edge e : graphAux.getEdges()) {
                                                    edgeAux = (Edge)e;
                                                    parser.insertarSimbolo(edgeAux.getName(), parser.LOCAL, edgeAux, 1);
                                                }
                                                parser.valorado = graphAux.isWeighted();
                                                parser.dirigido = graphAux.isDirected();
                                            }
                                            else parser.mostrarError("Fifth param " + identificador_arista + " must be an edge.", identificador_aristaleft, identificador_aristaright);
                                        }
                                        else {
                                            parser.mostrarError("Edge " + identificador_arista + " must be globally declared.", identificador_aristaleft, identificador_aristaright);
                                        }
                                    }
                                    else {
                                        parser.mostrarError("Fourth param " + identificador_nodo_destino + " must be an existing node in " + identificador_grafo_destino + ".", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                                    }
                                }
                                else {
                                    parser.mostrarError("Third param " + identificador_nodo_origen + " must be an existing node in " + identificador_grafo_origen + ".", identificador_nodo_origenleft, identificador_nodo_origenright);
                                }
                            }
                            else {
                                parser.mostrarError(identificador_grafo_origen + " and " + identificador_grafo_destino + " must be both directed graphs or undirected graphs.", identificador_grafo_origenleft, identificador_grafo_destinoright);
                            }
                        }
                        else {
                            parser.mostrarError("Second param " + identificador_grafo_destino + " must be a graph.", identificador_grafo_destinoleft, identificador_grafo_destinoright);
                        }
                    }
                    else {
                        parser.mostrarError("Second param " + identificador_grafo_destino + " has not been defined.", identificador_grafo_destinoleft, identificador_grafo_destinoright);
                    }
                }
                else {
                    parser.mostrarError("First param " + identificador_grafo_origen + " has not been defined.", identificador_grafo_origenleft, identificador_grafo_origenright);
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP5",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP2 ::= operadorBinario l_paren ident comma ident r_paren 
            {
              Operation RESULT =null;
		int identificador_operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identificador_operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object identificador_operacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int identificador_nodo_origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificador_nodo_origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identificador_nodo_origen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identificador_nodo_destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificador_nodo_destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String identificador_nodo_destino = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                EntradaTS entrada = null;
                Node source = null;
                Node target = null;
                Operation o = null;
                if (!parser.dirigido && identificador_operacion.equals("shortestPath")) {
                    parser.mostrarWarning("Operation " + identificador_operacion + " can only be applied to directed graphs.", identificador_operacionleft, identificador_operacionright);
                    parser.mostrarWarning("Operation " + identificador_operacion + " not executed.", identificador_operacionleft, identificador_operacionright);
                }
                else {
                    // Comprobamos el nodo origen
                    if (parser.existeSimbolo(identificador_nodo_origen, parser.LOCAL) || parser.existeSimbolo(identificador_nodo_origen, parser.GLOBAL)) {
                        if (parser.existeSimbolo(identificador_nodo_origen, parser.LOCAL)) {
                            entrada = parser.obtenerSimbolo(identificador_nodo_origen, parser.LOCAL);
                            if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0) {
                                source = (Node)entrada.getVariable();
                            }
                            else parser.mostrarError("First param " + identificador_nodo_origen + " must be a connected node.", identificador_nodo_origenleft, identificador_nodo_origenright);
                        }
                        else { //Global
                            entrada = parser.obtenerSimbolo(identificador_nodo_origen, parser.GLOBAL);
                            if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0)
                                source = (Node)entrada.getVariable();
                            else parser.mostrarError("First param " + identificador_nodo_origen + " must be a connected node.", identificador_nodo_origenleft, identificador_nodo_origenright);
                        }
                        // Comprobamos el nodo destino
                        if (parser.existeSimbolo(identificador_nodo_destino, parser.LOCAL) || parser.existeSimbolo(identificador_nodo_destino, parser.GLOBAL)) {
                            if (parser.existeSimbolo(identificador_nodo_destino, parser.LOCAL)) {
                                entrada = parser.obtenerSimbolo(identificador_nodo_destino, parser.LOCAL);
                                if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0) {
                                    target = (Node)entrada.getVariable();
                                }
                                else parser.mostrarError("Second param " + identificador_nodo_destino + " must be a connected node.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                            }
                            else { //Global
                                entrada = parser.obtenerSimbolo(identificador_nodo_destino, parser.GLOBAL);
                                if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0)
                                    target = (Node)entrada.getVariable();
                                else parser.mostrarError("Second param " + identificador_nodo_destino + " must be a connected node.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                            }
                            ArrayList<Object> lista = new ArrayList<Object>();
                            if (source != null && target != null) {
                                lista.add(source);
                                lista.add(target);
                            }
                            o = new Operation((String)identificador_operacion, lista);
                        }
                        else {
                            parser.mostrarError ("Node " + identificador_nodo_destino + " has not been declared.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                        }
                    }
                    else {
                        parser.mostrarError ("Node " + identificador_nodo_origen + " has not been declared.", identificador_nodo_origenleft, identificador_nodo_origenright);
                    }
                }
                RESULT = (Operation)o;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP1 ::= operadorUnario l_paren ident r_paren 
            {
              Operation RESULT =null;
		int identificador_operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificador_operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object identificador_operacion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int identificador_nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificador_nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String identificador_nodo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                EntradaTS entrada = null;
                Node source = null;
                Operation o = null;
                if (parser.dirigido && identificador_operacion.equals("minimumSpanningTree")) {
                    parser.mostrarWarning("Operation " + identificador_operacion + " can only be applied to undirected graphs.", identificador_operacionleft, identificador_operacionright);
                    parser.mostrarWarning("Operation " + identificador_operacion + " not executed.", identificador_operacionleft, identificador_operacionright);
                }
                else {
                    if (parser.existeSimbolo(identificador_nodo, parser.LOCAL) || parser.existeSimbolo(identificador_nodo, parser.GLOBAL)) {
                        if (parser.existeSimbolo(identificador_nodo, parser.LOCAL)) {
                            entrada = parser.obtenerSimbolo(identificador_nodo, parser.LOCAL);
                            if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0) {
                                source = (Node)entrada.getVariable();
                            }
                            else parser.mostrarError("Param " + identificador_nodo + " must be a connected node.", identificador_nodoleft, identificador_nodoright);
                        }
                        else { //Global
                            entrada = parser.obtenerSimbolo(identificador_nodo, parser.GLOBAL);
                            if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0)
                                source = (Node)entrada.getVariable();
                            else parser.mostrarError("Param " + identificador_nodo + " must be a connected node.", identificador_nodoleft, identificador_nodoright);
                        }
                        ArrayList<Object> lista = new ArrayList<Object>();
                        if (source != null) lista.add(source);
                        o = new Operation((String)identificador_operacion, lista);
                    }
                    else {
                        parser.mostrarError("Node " + identificador_nodo + " has not been declared.", identificador_nodoleft, identificador_nodoright);
                    }
                }
                RESULT = (Operation)o;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP ::= error 
            {
              Operation RESULT =null;
		 parser.report_error("Syntax error in operation zone.",null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP ::= OP2 semicolon 
            {
              Operation RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation operacion = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = (Operation)operacion;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP ::= OP1 semicolon 
            {
              Operation RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operation operacion = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = (Operation)operacion;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPS ::= OPS op OP 
            {
              ArrayList<Operation> RESULT =null;
		int lista_operacionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lista_operacionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Operation> lista_operaciones = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation operacion = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (operacion != null) {
                    ((ArrayList<Operation>)lista_operaciones).add(0, (Operation)operacion);
                }
                RESULT = (ArrayList<Operation>)lista_operaciones;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPS ::= op OP 
            {
              ArrayList<Operation> RESULT =null;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operation operacion = (Operation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<Operation> lista_operaciones = new ArrayList<Operation>();
                if (operacion != null) {
                    lista_operaciones.add(0, (Operation)operacion);
                }
                RESULT = (ArrayList<Operation>)lista_operaciones;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPS_GEN ::= OP5 semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS_GEN",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARC ::= error 
            {
              Object RESULT =null;
		 parser.report_error("Syntax error in connection edge zone.",null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARC ::= ident equal ident connector ident semicolon 
            {
              Object RESULT =null;
		int identificador_aristaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identificador_aristaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String identificador_arista = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int identificador_nodo_origenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificador_nodo_origenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identificador_nodo_origen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int conectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String conector = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int identificador_nodo_destinoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int identificador_nodo_destinoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String identificador_nodo_destino = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    EntradaTS entradaSource = null;
                    EntradaTS entradaTarget = null;
                    EntradaTS entradaEdge = null;
                    Node source = null;
                    Node target = null;
                    Edge edge = null;
                    // Comprobamos que existe el nodo origen
                    if (parser.existeSimbolo(identificador_nodo_origen, parser.LOCAL) || parser.existeSimbolo(identificador_nodo_origen, parser.GLOBAL)) {
                        if (parser.existeSimbolo(identificador_nodo_origen, parser.LOCAL)) {
                            entradaSource = parser.obtenerSimbolo(identificador_nodo_origen, parser.LOCAL);
                            if (entradaSource.getTipo() == parser.NODE) {
                                source = (Node)entradaSource.getVariable();
                            }
                            else parser.mostrarError ("Source node " + identificador_nodo_origen + " is not a node.", identificador_nodo_origenleft, identificador_nodo_origenright);
                        }
                        else { //Global
                            entradaSource = parser.obtenerSimbolo(identificador_nodo_origen, parser.GLOBAL);
                            if (entradaSource.getTipo() == parser.NODE)
                                source = (Node)entradaSource.getVariable();
                            else parser.mostrarError ("Source node " + identificador_nodo_origen + " is not a node.", identificador_nodo_origenleft, identificador_nodo_origenright);
                        }
                        // Comprobamos que existe el nodo destino
                        if (parser.existeSimbolo(identificador_nodo_destino, parser.LOCAL) || parser.existeSimbolo(identificador_nodo_destino, parser.GLOBAL)) {
                            if (parser.existeSimbolo(identificador_nodo_destino, parser.LOCAL)) {
                                entradaTarget = parser.obtenerSimbolo(identificador_nodo_destino, parser.LOCAL);
                                if (entradaTarget.getTipo() == parser.NODE) {
                                    target = (Node)entradaTarget.getVariable();
                                }
                                else parser.mostrarError ("Target node " + identificador_nodo_destino + " is not a node.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                            }
                            else { //Global
                                entradaTarget = parser.obtenerSimbolo(identificador_nodo_destino, parser.GLOBAL);
                                if (entradaTarget.getTipo() == parser.NODE)
                                    target = (Node)entradaTarget.getVariable();
                                else parser.mostrarError ("Target node " + identificador_nodo_destino + " is not a node.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                            }
                            // Comprobamos que existe la arista
                            if (parser.existeSimbolo(identificador_arista, parser.LOCAL) || parser.existeSimbolo(identificador_arista, parser.GLOBAL)) {
                                if (parser.existeSimbolo(identificador_arista, parser.LOCAL)) {
                                    entradaEdge = parser.obtenerSimbolo(identificador_arista, parser.LOCAL);
                                    if (entradaEdge.getTipo() == parser.EDGE) {
                                        edge = (Edge)entradaEdge.getVariable();
                                    }
                                    else parser.mostrarError ("Edge " + identificador_arista + " is not an edge.", identificador_aristaleft, identificador_aristaright);
                                }
                                else { //Global
                                    entradaEdge = parser.obtenerSimbolo(identificador_arista, parser.GLOBAL);
                                    if (entradaEdge.getTipo() == parser.EDGE)
                                        edge = (Edge)entradaEdge.getVariable();
                                    else parser.mostrarError ("Edge " + identificador_arista + " is not an edge.", identificador_aristaleft, identificador_aristaright);
                                }
                                edge.setFrom(source);
                                edge.setTo(target);
                                entradaSource.setTimesUsed(entradaSource.getTimesUsed() + 1);
                                entradaTarget.setTimesUsed(entradaTarget.getTimesUsed() + 1);
                                entradaEdge.setTimesUsed(entradaEdge.getTimesUsed() + 1);
                                if (conector.equals("-") && !parser.dirigido) parser.no_dirigido = true;
                                else {
                                    if (conector.equals("->") && !parser.no_dirigido) parser.dirigido = true;
                                    else {
                                        parser.mostrarError ("All edges must be directed or not directed.", conectorleft, conectorright);
                                    }
                                }
                            }
                            else {
                                parser.mostrarError ("Edge " + identificador_arista + " has not been declared.", identificador_aristaleft, identificador_aristaright);
                            }
                        }
                        else {
                            parser.mostrarError ("Target node " + identificador_nodo_destino + " has not been declared.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                        }
                    }
                    else {
                        parser.mostrarError ("Source node " + identificador_nodo_origen + " has not been declared.", identificador_nodo_origenleft, identificador_nodo_origenright);
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARC",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARCS ::= ARC ARCS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARCS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARCS ::= ARC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARCS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IDENTS_WEIGHTED ::= ident l_paren number r_paren comma IDENTS 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pesoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pesoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer peso = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
                    if (peso.intValue() >= 0 && peso.intValue() < Integer.MAX_VALUE) {
                        parser.valorado = true;
                        Edge edge = new Edge(identificador, peso);
                        parser.insertarSimbolo(identificador, parser.ambito, edge);
                    }
                    else {
                        parser.mostrarError ("Invalid weight for edge " + identificador, pesoleft, pesoright);
                    }
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTS_WEIGHTED",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IDENTS_WEIGHTED ::= ident l_paren number r_paren 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pesoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pesoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer peso = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
                    if (peso.intValue() >= 0 && peso.intValue() < Integer.MAX_VALUE) {
                        parser.valorado = true;
                        Edge edge = new Edge(identificador, peso);
                        parser.insertarSimbolo(identificador, parser.ambito, edge);
                    }
                    else {
                        parser.mostrarError ("Invalid weight for edge " + identificador, pesoleft, pesoright);
                    }
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTS_WEIGHTED",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IDENTS_SIMPLE ::= ident comma IDENTS 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
                    parser.no_valorado = true;
                    if (parser.valorado) parser.mostrarWarning ("Edge " + identificador + " is not explicitally weighted. Assuming weight 0.", identificadorleft, identificadorright);
					Edge edge = new Edge(identificador, 0);
					parser.insertarSimbolo(identificador, parser.ambito, edge);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTS_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IDENTS_SIMPLE ::= ident 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
                    parser.no_valorado = true;
                    if (parser.valorado) parser.mostrarWarning ("Edge " + identificador + " is not explicitally weighted. Assuming weight 0.", identificadorleft, identificadorright);
					Edge edge = new Edge(identificador, 0);
					parser.insertarSimbolo(identificador, parser.ambito, edge);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTS_SIMPLE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDENTS ::= IDENTS_WEIGHTED 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IDENTS ::= IDENTS_SIMPLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECL_EDGES ::= edge IDENTS semicolon DECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EDGES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECL_EDGES ::= edge IDENTS semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EDGES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IDENTS_NODE ::= ident comma IDENTS_NODE 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
					parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
					Node nodo = new Node(identificador);
					parser.insertarSimbolo(identificador, parser.ambito, nodo);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTS_NODE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IDENTS_NODE ::= ident 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
					Node nodo = new Node(identificador);
					parser.insertarSimbolo(identificador, parser.ambito, nodo);
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTS_NODE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECL_NODES ::= node IDENTS_NODE semicolon DECL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_NODES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECL_NODES ::= node IDENTS_NODE semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_NODES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECL ::= DECL_EDGES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECL ::= DECL_NODES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= error 
            {
              ArrayList<Operation> RESULT =null;
		 parser.report_error("Syntax error in declaration zone.",null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY ::= OPS_GEN OPS 
            {
              ArrayList<Operation> RESULT =null;
		int lista_operacionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_operacionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Operation> lista_operaciones = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (ArrayList<Operation>)lista_operaciones;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY ::= DECL ARCS OPS 
            {
              ArrayList<Operation> RESULT =null;
		int lista_operacionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_operacionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Operation> lista_operaciones = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (ArrayList<Operation>)lista_operaciones;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BODY",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GRAPH ::= error 
            {
              Graph RESULT =null;
		 parser.report_error("Syntax error in graph definition.",null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GRAPH ::= graph ident l_bracket BODY r_bracket 
            {
              Graph RESULT =null;
		int identificador_grafoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identificador_graforight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String identificador_grafo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lista_operacionesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lista_operacionesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Operation> lista_operaciones = (ArrayList<Operation>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Graph gr = null;
                if (!parser.existeSimbolo(identificador_grafo, parser.GLOBAL)) {
                    if (!parser.errorAnalisis) {
                        //Crear el grafo con los simbolos de ambito 0 y 1 usados mas de una vez (con clone)
                        ArrayList<Node> nodes = new ArrayList<Node>();
                        ArrayList<Edge> edges = new ArrayList<Edge>();
                        Enumeration<ClaveTS> elements;
                        ClaveTS clave;
                        EntradaTS entrada;
                        Edge aristaAux = null;
                        Node nodoAux = null;

                        elements = parser.getTabla().keys();
                        while (elements.hasMoreElements()) {
                            clave = elements.nextElement();
                            entrada = parser.getTabla().get(clave);
                            if (entrada.getTimesUsed() > 0) {
                                if (entrada.getTipo() == parser.EDGE) {
                                    aristaAux = (Edge)entrada.getVariable();
                                    edges.add(0, (Edge)aristaAux.clone());
                                }
                                if (entrada.getTipo() == parser.NODE) {
                                    nodoAux = (Node)entrada.getVariable();
                                    nodes.add(0, (Node)nodoAux.clone());
                                }
                            }
                        }
                        //Añadirle la lista de operaciones que ha subido de body, comprobando antes que existen.
                        gr = new Graph((String)identificador_grafo, parser.valorado, parser.dirigido, nodes, edges, (ArrayList<Operation>)lista_operaciones);
                        //Añadir el grafo a la tabla de simbolos con ambito global
                        parser.insertarSimbolo(identificador_grafo, parser.GLOBAL, gr);
                    }
                    else {
                        parser.mostrarError ("Graph " + identificador_grafo + " not generated.", identificador_grafoleft, identificador_graforight);
                    }
                }
                else {
                    parser.mostrarError(identificador_grafo + " is already defined.", identificador_grafoleft, identificador_graforight);
                }
                RESULT = (Graph)gr;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GRAPHS_SET ::= GRAPH NT$2 GRAPHS_SET 
            {
              ArrayList<Graph> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ArrayList<Graph>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int grafoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int graforight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Graph grafo = (Graph)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaGrafosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaGrafosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Graph> listaGrafos = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if ((Graph)grafo != null) ((ArrayList<Graph>)listaGrafos).add(0, (Graph)grafo);
                RESULT = (ArrayList<Graph>)listaGrafos;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPHS_SET",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              ArrayList<Graph> RESULT =null;
		int grafoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int graforight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Graph grafo = (Graph)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 parser.resetearAnalisis(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GRAPHS_SET ::= GRAPH 
            {
              ArrayList<Graph> RESULT =null;
		int grafoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int graforight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Graph grafo = (Graph)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<Graph> listaGrafos = new ArrayList<Graph>();
                if ((Graph)grafo != null) listaGrafos.add(0, (Graph)grafo);
                RESULT = (ArrayList<Graph>)listaGrafos;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAPHS_SET",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SYNTAX ::= DECL NT$1 GRAPHS_SET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaGrafosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaGrafosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Graph> listaGrafos = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.resetearAnalisis();
                parser.setGrafos((ArrayList<Graph>)listaGrafos);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SYNTAX",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.ambito = parser.LOCAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= SYNTAX EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SYNTAX ::= NT$0 GRAPHS_SET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listaGrafosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listaGrafosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Graph> listaGrafos = (ArrayList<Graph>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                parser.resetearAnalisis();
                parser.setGrafos((ArrayList<Graph>)listaGrafos);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SYNTAX",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.ambito = parser.LOCAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

