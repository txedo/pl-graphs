/* Especificaciones de package e imports */
package analizador;

import java_cup.runtime.*;
import dominio.*;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Enumeration;

/* Componentes de codigo de usuario */
parser code {:
	public static final int GLOBAL = 0;
	public static final int LOCAL = 1;
    public static final int NODE = 0;
    public static final int EDGE = 1;
    public static final int GRAPH = 2;

	public int ambito = GLOBAL;
    public boolean dirigido = false;
    public boolean no_dirigido = false;
    public boolean valorado = false;
    public boolean no_valorado = false;
    public boolean errorAnalisis = false;

    private ArrayList<Graph> grafos = new ArrayList<Graph>();
    private String mensajes = new String("");

    public ArrayList<Graph> getGrafos () {
        return grafos;
    }

    public void setGrafos (ArrayList<Graph> lg) {
        grafos = lg;
    }

    public String getMensajes() {
        return mensajes;
    }

	private Hashtable<ClaveTS, EntradaTS> tablaSimbolos = new Hashtable<ClaveTS, EntradaTS>();

	public void borrarTS() {
		tablaSimbolos.clear();
	}

	public boolean existeSimbolo(ClaveTS clave) {
		return tablaSimbolos.containsKey(clave);
	}

    public boolean existeSimbolo(String identificador, int scope) {
        ClaveTS c = new ClaveTS(identificador, scope);
		return tablaSimbolos.containsKey((ClaveTS)c);
	}

	public Hashtable<ClaveTS, EntradaTS> getTabla() {
		return tablaSimbolos;
	}

	public void insertarSimbolo(String nombre, int scope, Object objeto) {
        ClaveTS c = new ClaveTS(nombre, scope);
        EntradaTS e = new EntradaTS(objeto, 0);
		tablaSimbolos.put(c, e);
	}

	public void insertarSimbolo(String nombre, int scope, Object objeto, int timesUsed) {
        ClaveTS c = new ClaveTS(nombre, scope);
        EntradaTS e = new EntradaTS(objeto, timesUsed);
		tablaSimbolos.put(c, e);
	}

    public void insertarSimbolo(ClaveTS c, EntradaTS e) {
		tablaSimbolos.put(c, e);
	}

	public EntradaTS obtenerSimbolo(String nombre, int scope) {
        ClaveTS c = new ClaveTS(nombre, scope);
		return tablaSimbolos.get(c);
	}

    public EntradaTS obtenerSimbolo(ClaveTS clave) {
		return tablaSimbolos.get(clave);
	}

	public int obtenerTipoSimbolo(String nombre) {
		return tablaSimbolos.get(nombre).getTipo();
	}

    public void mostrarError (String mensaje, int fila, int columna) {
        errorAnalisis = true;
        mensajes += fila + ":" + columna + " Semantic error: " + mensaje + "\n";
    }

    public void mostrarWarning (String mensaje) {
        mensajes += "Warning: " + mensaje + "\n";
    }

    public void mostrarWarning (String mensaje, int fila, int columna) {
        mensajes += fila + ":" + columna + " Warning: " + mensaje + "\n";
    }


    public void resetearAnalisis (){
        Enumeration<ClaveTS> elements;
        ClaveTS clave;
        EntradaTS entrada;
        Edge aristaAux = null;
        Node nodoAux = null;

        dirigido = false;
        no_dirigido = false;
        valorado = false;
        no_valorado = false;
        errorAnalisis = false;
        elements = tablaSimbolos.keys();
        while (elements.hasMoreElements()) {
            clave = elements.nextElement();
            entrada = tablaSimbolos.get(clave);
            if (clave.getScope() == LOCAL) {
                if (entrada.getTimesUsed() == 0) { //Warning
                    if (entrada.getTipo() == EDGE) {
                        aristaAux = (Edge)entrada.getVariable();
                        mostrarWarning ("Edge " + aristaAux.getName() + " not used. Assuming it does not exist.");
                    }
                    else { // NODE
                        nodoAux = (Node)entrada.getVariable();
                        mostrarWarning ("Node " + nodoAux.getName() + " not used. Assuming it does not exist.");
                    }
                }
                tablaSimbolos.remove(clave);
            }
            else { // GLOBAL
                // reseteamos las veces usadas
                entrada.setTimesUsed(0);
                if (entrada.getTipo() == EDGE) {
                    Edge e = (Edge)entrada.getVariable();
                    e.setFrom(null);
                    e.setTo(null);
                    e.setWeight(0);
                }
            }
        }
    }

	public void report_error (String message, Object info) {
		StringBuffer m = new StringBuffer("");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(""+(s.left));
				if (s.right >= 0)
					m.append(":"+(s.right)+" ");
			}
		}
		m.append(message);
		System.err.println(m);
        mensajes += m + "\n";
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message,info);
		//System.exit(1);
	}
:};

/* Lista de simbolos de la gramatica (terminales y no terminales) */
terminal graph, node, edge, op, operadorUnario, operadorBinario, operadorQuinario;
terminal l_bracket, r_bracket, l_paren, r_paren;
terminal semicolon, comma, equal;
terminal String ident, connector;
terminal Integer number;
non terminal DECL;
non terminal SYNTAX;
non terminal DECL_NODES, DECL_EDGES;
non terminal IDENTS_NODE;
non terminal IDENTS, IDENTS_SIMPLE, IDENTS_WEIGHTED;
non terminal ARCS;
non terminal ARC;
non terminal OPS_GEN, OP5;
non terminal ArrayList<Operation> OPS, BODY;
non terminal Operation OP, OP1, OP2;
non terminal Graph GRAPH;
non terminal ArrayList<Graph> GRAPHS_SET;

/* Declaraciones de precedencia */

/* Especificacion de la gramatica */
SYNTAX		::=      {: parser.ambito = parser.LOCAL; :} GRAPHS_SET:listaGrafos
            {:
                parser.resetearAnalisis();
                parser.setGrafos((ArrayList<Graph>)listaGrafos);
            :}
		|   DECL {: parser.ambito = parser.LOCAL; :} GRAPHS_SET:listaGrafos
            {:
                parser.resetearAnalisis();
                parser.setGrafos((ArrayList<Graph>)listaGrafos);
            :}
		;
GRAPHS_SET 	::= GRAPH:grafo
            {:
                ArrayList<Graph> listaGrafos = new ArrayList<Graph>();
                if ((Graph)grafo != null) listaGrafos.add(0, (Graph)grafo);
                RESULT = (ArrayList<Graph>)listaGrafos;
            :}
		|   GRAPH:grafo {: parser.resetearAnalisis(); :} GRAPHS_SET:listaGrafos
            {:
                if ((Graph)grafo != null) ((ArrayList<Graph>)listaGrafos).add(0, (Graph)grafo);
                RESULT = (ArrayList<Graph>)listaGrafos;
            :}
		;
GRAPH 		::= graph ident:identificador_grafo l_bracket BODY:lista_operaciones r_bracket
            {:
                Graph gr = null;
                if (!parser.existeSimbolo(identificador_grafo, parser.GLOBAL)) {
                    if (!parser.errorAnalisis) {
                        //Crear el grafo con los simbolos de ambito 0 y 1 usados mas de una vez (con clone)
                        ArrayList<Node> nodes = new ArrayList<Node>();
                        ArrayList<Edge> edges = new ArrayList<Edge>();
                        Enumeration<ClaveTS> elements;
                        ClaveTS clave;
                        EntradaTS entrada;
                        Edge aristaAux = null;
                        Node nodoAux = null;

                        elements = parser.getTabla().keys();
                        while (elements.hasMoreElements()) {
                            clave = elements.nextElement();
                            entrada = parser.getTabla().get(clave);
                            if (entrada.getTimesUsed() > 0) {
                                if (entrada.getTipo() == parser.EDGE) {
                                    aristaAux = (Edge)entrada.getVariable();
                                    edges.add(0, (Edge)aristaAux.clone());
                                }
                                if (entrada.getTipo() == parser.NODE) {
                                    nodoAux = (Node)entrada.getVariable();
                                    nodes.add(0, (Node)nodoAux.clone());
                                }
                            }
                        }
                        //Añadirle la lista de operaciones que ha subido de body, comprobando antes que existen.
                        gr = new Graph((String)identificador_grafo, parser.valorado, parser.dirigido, nodes, edges, (ArrayList<Operation>)lista_operaciones);
                        //Añadir el grafo a la tabla de simbolos con ambito global
                        parser.insertarSimbolo(identificador_grafo, parser.GLOBAL, gr);
                    }
                    else {
                        parser.mostrarError ("Graph " + identificador_grafo + " not generated.", identificador_grafoleft, identificador_graforight);
                    }
                }
                else {
                    parser.mostrarError(identificador_grafo + " is already defined.", identificador_grafoleft, identificador_graforight);
                }
                RESULT = (Graph)gr;
            :}
		| error
			{: parser.report_error("Syntax error in graph definition.",null); :}
		;
BODY 		::= DECL ARCS OPS:lista_operaciones
            {:
                RESULT = (ArrayList<Operation>)lista_operaciones;
            :}
		|   OPS_GEN   OPS:lista_operaciones
            {:
                RESULT = (ArrayList<Operation>)lista_operaciones;
            :}
		| error
			{: parser.report_error("Syntax error in declaration zone.",null); :}
		;
DECL 		::= DECL_NODES
		|   DECL_EDGES
		;
DECL_NODES 	::= node IDENTS_NODE semicolon
		|   node IDENTS_NODE semicolon DECL
		;
IDENTS_NODE	::= ident:identificador
			{:
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
					Node nodo = new Node(identificador);
					parser.insertarSimbolo(identificador, parser.ambito, nodo);
				}
			:}
		|   ident:identificador comma IDENTS_NODE
            {:
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
					parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
					Node nodo = new Node(identificador);
					parser.insertarSimbolo(identificador, parser.ambito, nodo);
				}
			:}
		;
DECL_EDGES 	::= edge IDENTS semicolon
		|   edge IDENTS semicolon DECL
		;
IDENTS		::= IDENTS_SIMPLE
		|   IDENTS_WEIGHTED
		;
IDENTS_SIMPLE	::= ident:identificador
			{:
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
                    parser.no_valorado = true;
                    if (parser.valorado) parser.mostrarWarning ("Edge " + identificador + " is not explicitally weighted. Assuming weight 0.", identificadorleft, identificadorright);
					Edge edge = new Edge(identificador, 0);
					parser.insertarSimbolo(identificador, parser.ambito, edge);
				}
			:}
		|   ident:identificador comma IDENTS
			{:
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
                    parser.no_valorado = true;
                    if (parser.valorado) parser.mostrarWarning ("Edge " + identificador + " is not explicitally weighted. Assuming weight 0.", identificadorleft, identificadorright);
					Edge edge = new Edge(identificador, 0);
					parser.insertarSimbolo(identificador, parser.ambito, edge);
				}
			:}
		;
IDENTS_WEIGHTED	::= ident:identificador l_paren number:peso r_paren
			{:
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
                    if (peso.intValue() >= 0 && peso.intValue() < Integer.MAX_VALUE) {
                        parser.valorado = true;
                        Edge edge = new Edge(identificador, peso);
                        parser.insertarSimbolo(identificador, parser.ambito, edge);
                    }
                    else {
                        parser.mostrarError ("Invalid weight for edge " + identificador, pesoleft, pesoright);
                    }
				}
			:}
		|   ident:identificador l_paren number:peso r_paren comma IDENTS
			{:
				boolean existe = false;
				if (parser.existeSimbolo(identificador, parser.ambito)) {
                    existe = true;
                    parser.mostrarError(identificador + " is already defined.", identificadorleft, identificadorright);
				}
				if (!existe) {
                    if (peso.intValue() >= 0 && peso.intValue() < Integer.MAX_VALUE) {
                        parser.valorado = true;
                        Edge edge = new Edge(identificador, peso);
                        parser.insertarSimbolo(identificador, parser.ambito, edge);
                    }
                    else {
                        parser.mostrarError ("Invalid weight for edge " + identificador, pesoleft, pesoright);
                    }
				}
			:}
		;
ARCS 		::= ARC
		|   ARC ARCS
		;
ARC 		::= ident:identificador_arista equal ident:identificador_nodo_origen connector:conector ident:identificador_nodo_destino semicolon
                {:
                    EntradaTS entradaSource = null;
                    EntradaTS entradaTarget = null;
                    EntradaTS entradaEdge = null;
                    Node source = null;
                    Node target = null;
                    Edge edge = null;
                    // Comprobamos que existe el nodo origen
                    if (parser.existeSimbolo(identificador_nodo_origen, parser.LOCAL) || parser.existeSimbolo(identificador_nodo_origen, parser.GLOBAL)) {
                        if (parser.existeSimbolo(identificador_nodo_origen, parser.LOCAL)) {
                            entradaSource = parser.obtenerSimbolo(identificador_nodo_origen, parser.LOCAL);
                            if (entradaSource.getTipo() == parser.NODE) {
                                source = (Node)entradaSource.getVariable();
                            }
                            else parser.mostrarError ("Source node " + identificador_nodo_origen + " is not a node.", identificador_nodo_origenleft, identificador_nodo_origenright);
                        }
                        else { //Global
                            entradaSource = parser.obtenerSimbolo(identificador_nodo_origen, parser.GLOBAL);
                            if (entradaSource.getTipo() == parser.NODE)
                                source = (Node)entradaSource.getVariable();
                            else parser.mostrarError ("Source node " + identificador_nodo_origen + " is not a node.", identificador_nodo_origenleft, identificador_nodo_origenright);
                        }
                        // Comprobamos que existe el nodo destino
                        if (parser.existeSimbolo(identificador_nodo_destino, parser.LOCAL) || parser.existeSimbolo(identificador_nodo_destino, parser.GLOBAL)) {
                            if (parser.existeSimbolo(identificador_nodo_destino, parser.LOCAL)) {
                                entradaTarget = parser.obtenerSimbolo(identificador_nodo_destino, parser.LOCAL);
                                if (entradaTarget.getTipo() == parser.NODE) {
                                    target = (Node)entradaTarget.getVariable();
                                }
                                else parser.mostrarError ("Target node " + identificador_nodo_destino + " is not a node.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                            }
                            else { //Global
                                entradaTarget = parser.obtenerSimbolo(identificador_nodo_destino, parser.GLOBAL);
                                if (entradaTarget.getTipo() == parser.NODE)
                                    target = (Node)entradaTarget.getVariable();
                                else parser.mostrarError ("Target node " + identificador_nodo_destino + " is not a node.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                            }
                            // Comprobamos que existe la arista
                            if (parser.existeSimbolo(identificador_arista, parser.LOCAL) || parser.existeSimbolo(identificador_arista, parser.GLOBAL)) {
                                if (parser.existeSimbolo(identificador_arista, parser.LOCAL)) {
                                    entradaEdge = parser.obtenerSimbolo(identificador_arista, parser.LOCAL);
                                    if (entradaEdge.getTipo() == parser.EDGE) {
                                        edge = (Edge)entradaEdge.getVariable();
                                    }
                                    else parser.mostrarError ("Edge " + identificador_arista + " is not an edge.", identificador_aristaleft, identificador_aristaright);
                                }
                                else { //Global
                                    entradaEdge = parser.obtenerSimbolo(identificador_arista, parser.GLOBAL);
                                    if (entradaEdge.getTipo() == parser.EDGE)
                                        edge = (Edge)entradaEdge.getVariable();
                                    else parser.mostrarError ("Edge " + identificador_arista + " is not an edge.", identificador_aristaleft, identificador_aristaright);
                                }
                                edge.setFrom(source);
                                edge.setTo(target);
                                entradaSource.setTimesUsed(entradaSource.getTimesUsed() + 1);
                                entradaTarget.setTimesUsed(entradaTarget.getTimesUsed() + 1);
                                entradaEdge.setTimesUsed(entradaEdge.getTimesUsed() + 1);
                                if (conector.equals("-") && !parser.dirigido) parser.no_dirigido = true;
                                else {
                                    if (conector.equals("->") && !parser.no_dirigido) parser.dirigido = true;
                                    else {
                                        parser.mostrarError ("All edges must be directed or not directed.", conectorleft, conectorright);
                                    }
                                }
                            }
                            else {
                                parser.mostrarError ("Edge " + identificador_arista + " has not been declared.", identificador_aristaleft, identificador_aristaright);
                            }
                        }
                        else {
                            parser.mostrarError ("Target node " + identificador_nodo_destino + " has not been declared.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                        }
                    }
                    else {
                        parser.mostrarError ("Source node " + identificador_nodo_origen + " has not been declared.", identificador_nodo_origenleft, identificador_nodo_origenright);
                    }
                :}
		| error
			{: parser.report_error("Syntax error in connection edge zone.",null); :}
		;
OPS_GEN 	::= OP5 semicolon
		;
OPS 		::= op OP:operacion
            {:
                ArrayList<Operation> lista_operaciones = new ArrayList<Operation>();
                if (operacion != null) {
                    lista_operaciones.add(0, (Operation)operacion);
                }
                RESULT = (ArrayList<Operation>)lista_operaciones;
            :}
		|   OPS:lista_operaciones op OP:operacion
            {:
                if (operacion != null) {
                    ((ArrayList<Operation>)lista_operaciones).add(0, (Operation)operacion);
                }
                RESULT = (ArrayList<Operation>)lista_operaciones;
            :}
		;
OP 		::= OP1:operacion semicolon
            {:
                RESULT = (Operation)operacion;
            :}
		|   OP2:operacion semicolon
            {:
                RESULT = (Operation)operacion;
            :}
		| error
			{: parser.report_error("Syntax error in operation zone.",null); :}
		;
OP1 		::= operadorUnario:identificador_operacion   l_paren ident:identificador_nodo                                                 r_paren
            {:
                EntradaTS entrada = null;
                Node source = null;
                Operation o = null;
                if (parser.dirigido && identificador_operacion.equals("minimumSpanningTree")) {
                    parser.mostrarWarning("Operation " + identificador_operacion + " can only be applied to undirected graphs.", identificador_operacionleft, identificador_operacionright);
                    parser.mostrarWarning("Operation " + identificador_operacion + " not executed.", identificador_operacionleft, identificador_operacionright);
                }
                else {
                    if (parser.existeSimbolo(identificador_nodo, parser.LOCAL) || parser.existeSimbolo(identificador_nodo, parser.GLOBAL)) {
                        if (parser.existeSimbolo(identificador_nodo, parser.LOCAL)) {
                            entrada = parser.obtenerSimbolo(identificador_nodo, parser.LOCAL);
                            if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0) {
                                source = (Node)entrada.getVariable();
                            }
                            else parser.mostrarError("Param " + identificador_nodo + " must be a connected node.", identificador_nodoleft, identificador_nodoright);
                        }
                        else { //Global
                            entrada = parser.obtenerSimbolo(identificador_nodo, parser.GLOBAL);
                            if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0)
                                source = (Node)entrada.getVariable();
                            else parser.mostrarError("Param " + identificador_nodo + " must be a connected node.", identificador_nodoleft, identificador_nodoright);
                        }
                        ArrayList<Object> lista = new ArrayList<Object>();
                        if (source != null) lista.add(source);
                        o = new Operation((String)identificador_operacion, lista);
                    }
                    else {
                        parser.mostrarError("Node " + identificador_nodo + " has not been declared.", identificador_nodoleft, identificador_nodoright);
                    }
                }
                RESULT = (Operation)o;
            :}
		;
OP2 		::= operadorBinario:identificador_operacion  l_paren ident:identificador_nodo_origen comma ident:identificador_nodo_destino                                     r_paren
            {:
                EntradaTS entrada = null;
                Node source = null;
                Node target = null;
                Operation o = null;
                if (!parser.dirigido && identificador_operacion.equals("shortestPath")) {
                    parser.mostrarWarning("Operation " + identificador_operacion + " can only be applied to directed graphs.", identificador_operacionleft, identificador_operacionright);
                    parser.mostrarWarning("Operation " + identificador_operacion + " not executed.", identificador_operacionleft, identificador_operacionright);
                }
                else {
                    // Comprobamos el nodo origen
                    if (parser.existeSimbolo(identificador_nodo_origen, parser.LOCAL) || parser.existeSimbolo(identificador_nodo_origen, parser.GLOBAL)) {
                        if (parser.existeSimbolo(identificador_nodo_origen, parser.LOCAL)) {
                            entrada = parser.obtenerSimbolo(identificador_nodo_origen, parser.LOCAL);
                            if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0) {
                                source = (Node)entrada.getVariable();
                            }
                            else parser.mostrarError("First param " + identificador_nodo_origen + " must be a connected node.", identificador_nodo_origenleft, identificador_nodo_origenright);
                        }
                        else { //Global
                            entrada = parser.obtenerSimbolo(identificador_nodo_origen, parser.GLOBAL);
                            if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0)
                                source = (Node)entrada.getVariable();
                            else parser.mostrarError("First param " + identificador_nodo_origen + " must be a connected node.", identificador_nodo_origenleft, identificador_nodo_origenright);
                        }
                        // Comprobamos el nodo destino
                        if (parser.existeSimbolo(identificador_nodo_destino, parser.LOCAL) || parser.existeSimbolo(identificador_nodo_destino, parser.GLOBAL)) {
                            if (parser.existeSimbolo(identificador_nodo_destino, parser.LOCAL)) {
                                entrada = parser.obtenerSimbolo(identificador_nodo_destino, parser.LOCAL);
                                if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0) {
                                    target = (Node)entrada.getVariable();
                                }
                                else parser.mostrarError("Second param " + identificador_nodo_destino + " must be a connected node.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                            }
                            else { //Global
                                entrada = parser.obtenerSimbolo(identificador_nodo_destino, parser.GLOBAL);
                                if (entrada.getTipo() == parser.NODE && entrada.getTimesUsed() > 0)
                                    target = (Node)entrada.getVariable();
                                else parser.mostrarError("Second param " + identificador_nodo_destino + " must be a connected node.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                            }
                            ArrayList<Object> lista = new ArrayList<Object>();
                            if (source != null && target != null) {
                                lista.add(source);
                                lista.add(target);
                            }
                            o = new Operation((String)identificador_operacion, lista);
                        }
                        else {
                            parser.mostrarError ("Node " + identificador_nodo_destino + " has not been declared.", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                        }
                    }
                    else {
                        parser.mostrarError ("Node " + identificador_nodo_origen + " has not been declared.", identificador_nodo_origenleft, identificador_nodo_origenright);
                    }
                }
                RESULT = (Operation)o;
            :}
		;
OP5 		::= operadorQuinario:identificador_operacion l_paren ident:identificador_grafo_origen comma ident:identificador_grafo_destino comma ident:identificador_nodo_origen comma ident:identificador_nodo_destino comma ident:identificador_arista r_paren
            {:
                EntradaTS entrada = null;
                Graph sourceGraph = null;
                Graph targetGraph = null;
                Node source = null;
                Node target = null;
                Edge edge = null;
                Graph graphAux = null;
                Node nodeAux = null;
                Edge edgeAux = null;
                if (parser.existeSimbolo(identificador_grafo_origen, parser.GLOBAL)) {
                    entrada = parser.obtenerSimbolo(identificador_grafo_origen, parser.GLOBAL);
                    if (entrada.getTipo() == parser.GRAPH)
                        sourceGraph = (Graph)entrada.getVariable();
                    else parser.mostrarError("First param " + identificador_grafo_origen + " must be a graph.", identificador_grafo_origenleft, identificador_grafo_origenright);
                    // Comprobamos que existe el grafo 2
                    if (parser.existeSimbolo(identificador_grafo_destino, parser.GLOBAL)) {
                        entrada = parser.obtenerSimbolo(identificador_grafo_destino, parser.GLOBAL);
                        if (entrada.getTipo() == parser.GRAPH) {
                            targetGraph = (Graph)entrada.getVariable();
                            if ((sourceGraph.isDirected() && targetGraph.isDirected()) || (!sourceGraph.isDirected() && !targetGraph.isDirected())) {
                                if ((sourceGraph.isWeighted() && !targetGraph.isWeighted()) || (!sourceGraph.isWeighted() && targetGraph.isWeighted()))
                                    parser.mostrarWarning("Both " + identificador_grafo_origen + " and " + identificador_grafo_destino + " are not weighted.", identificador_grafo_origenleft, identificador_grafo_destinoright);
                                // Comprobamos que existe el nodo origen en sourceGraph, si existe es porque el grafo es conexo
                                if (sourceGraph.hasNode(identificador_nodo_origen)) {
                                    source = (Node)sourceGraph.getNode(identificador_nodo_origen);
                                    // Comprobamos que existe el nodo destino en targetGraph
                                    if (targetGraph.hasNode(identificador_nodo_destino)) {
                                        target = (Node)targetGraph.getNode(identificador_nodo_destino);
                                        // Comprobamos que existe la arista globalmente
                                        if (parser.existeSimbolo(identificador_arista, parser.GLOBAL)) {
                                            entrada = parser.obtenerSimbolo(identificador_arista, parser.GLOBAL);
                                            if (entrada.getTipo() == parser.EDGE) {
                                                edge = (Edge)entrada.getVariable();
                                                // como se cumplen todas las condiciones...
                                                graphAux = Graph.Union(sourceGraph, targetGraph, source, target, edge);
                                                for (Node n : graphAux.getNodes()) {
                                                    nodeAux = (Node)n;
                                                    parser.insertarSimbolo(nodeAux.getName(), parser.LOCAL, nodeAux, 1);
                                                }
                                                for (Edge e : graphAux.getEdges()) {
                                                    edgeAux = (Edge)e;
                                                    parser.insertarSimbolo(edgeAux.getName(), parser.LOCAL, edgeAux, 1);
                                                }
                                                parser.valorado = graphAux.isWeighted();
                                                parser.dirigido = graphAux.isDirected();
                                            }
                                            else parser.mostrarError("Fifth param " + identificador_arista + " must be an edge.", identificador_aristaleft, identificador_aristaright);
                                        }
                                        else {
                                            parser.mostrarError("Edge " + identificador_arista + " must be globally declared.", identificador_aristaleft, identificador_aristaright);
                                        }
                                    }
                                    else {
                                        parser.mostrarError("Fourth param " + identificador_nodo_destino + " must be an existing node in " + identificador_grafo_destino + ".", identificador_nodo_destinoleft, identificador_nodo_destinoright);
                                    }
                                }
                                else {
                                    parser.mostrarError("Third param " + identificador_nodo_origen + " must be an existing node in " + identificador_grafo_origen + ".", identificador_nodo_origenleft, identificador_nodo_origenright);
                                }
                            }
                            else {
                                parser.mostrarError(identificador_grafo_origen + " and " + identificador_grafo_destino + " must be both directed graphs or undirected graphs.", identificador_grafo_origenleft, identificador_grafo_destinoright);
                            }
                        }
                        else {
                            parser.mostrarError("Second param " + identificador_grafo_destino + " must be a graph.", identificador_grafo_destinoleft, identificador_grafo_destinoright);
                        }
                    }
                    else {
                        parser.mostrarError("Second param " + identificador_grafo_destino + " has not been defined.", identificador_grafo_destinoleft, identificador_grafo_destinoright);
                    }
                }
                else {
                    parser.mostrarError("First param " + identificador_grafo_origen + " has not been defined.", identificador_grafo_origenleft, identificador_grafo_origenright);
                }
            :}
		;