/* Especificaciones de package e imports */
import java_cup.runtime.*;
import dominio.*;
import java.util.ArrayList;

/* Componentes de codigo de usuario */
parser code {:
	public void report_error (String message, Object info) {
		StringBuffer m = new StringBuffer("Error");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" en la linea "+(s.left));
				if (s.right >= 0)
					m.append(", columna "+(s.right));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message,info);
		System.exit(1);
	}
:};


/* Lista de simbolos de la gramatica (terminales y no terminales) */
terminal graph, node, edge, operadorUnario, operadorBinario, operadorQuinario;
terminal l_bracket, r_bracket, l_paren, r_paren;
terminal semicolon, comma, equal, connector;
terminal String ident;
terminal Integer number;
non terminal SYNTAX, GRAPHS_SET, GRAPH, BODY;
non terminal OPS_GEN, OPS, OP, OP1, OP2, OP5;
non terminal AtributosGrafo DECL, DECL_NODES, DECL_EDGES;
non terminal ArrayList<String> IDENTS_NODE;
non terminal ArrayList<Arco> IDENTS, IDENTS_SIMPLE, IDENTS_WEIGHTED;
non terminal ArrayList<Arco> ARCS;
non terminal Arco ARC;

/* Declaraciones de precedencia */

/* Especificación de la gramatica */
SYNTAX		::=      GRAPHS_SET
		|   DECL GRAPHS_SET 
		;
GRAPHS_SET 	::= GRAPH:id
			{:
			   System.out.println ("Grafo " + id);
			:}
		|   GRAPH GRAPHS_SET
		;
GRAPH 		::= graph ident:identificador_grafo l_bracket BODY r_bracket semicolon
			{: RESULT = identificador_grafo; :}
		| error
			{: parser.report_error("Error de sintaxis en la definicion de grafo.",null); :}
		;
BODY 		::= DECL:atrib ARCS:listaArcos OPS 
			{:
			   System.out.println (atrib.getListaNodos().toString());
			   System.out.println (atrib.getListaArcos().toString());
			   System.out.println (listaArcos.toString());
			:}
		|   OPS_GEN   OPS
		| error ARCS OPS
			{: parser.report_error("Error de sintaxis en la zona de declaracion de nodos y aristas.",null); :}
		| error OPS
			{: parser.report_error("Error de sintaxis en la conexion de aristas o generacion de grafo.",null); :}
		| error
			{: parser.report_error("Error de sintaxis en la zona de operaciones.",null); :}
		;
DECL 		::= DECL_NODES:atrib
			{:
			   RESULT = (AtributosGrafo)atrib;
			:}
		|   DECL_EDGES:atrib
			{:
			   RESULT = (AtributosGrafo)atrib;
			:}
		;
DECL_NODES 	::= node IDENTS_NODE:listaNodos semicolon
			{:
			   AtributosGrafo atrib = new AtributosGrafo();
			   atrib.getListaNodos().addAll((ArrayList<String>)listaNodos);
			   RESULT = (AtributosGrafo)atrib;
			:}
		|   node IDENTS_NODE:listaNodos semicolon DECL:atrib
			{:
			   atrib.getListaNodos().addAll((ArrayList<String>)listaNodos);
			   RESULT = (AtributosGrafo)atrib;
			:}
		;
IDENTS_NODE	::= ident:identificador_nodo
			{:
			   ArrayList<String> listaNodos = new ArrayList<String>();
			   listaNodos.add((String)identificador_nodo);
			   RESULT = (ArrayList<String>)listaNodos;
			:}
		|   ident:identificador_nodo comma IDENTS_NODE:listaNodos
			{:
			   listaNodos.add((String)identificador_nodo);
			   RESULT = (ArrayList<String>)listaNodos;
			:}
		;
DECL_EDGES 	::= edge IDENTS:listaArcos semicolon
			{:
			   AtributosGrafo atrib = new AtributosGrafo();
			   atrib.getListaArcos().addAll((ArrayList<Arco>)listaArcos);
			   RESULT = (AtributosGrafo)atrib;
			:}
		|   edge IDENTS:listaArcos semicolon DECL:atrib
			{:
			   atrib.getListaArcos().addAll((ArrayList<Arco>)listaArcos);
			   RESULT = (AtributosGrafo)atrib;
			:}
		;
IDENTS		::= IDENTS_SIMPLE:listaArcos
			{:
			   RESULT = (ArrayList<Arco>)listaArcos;
			:}
		|   IDENTS_WEIGHTED:listaArcos
			{:
			   RESULT = (ArrayList<Arco>)listaArcos;
			:}
		;
IDENTS_SIMPLE	::= ident:identificador_arco
			{:
			   ArrayList<Arco> listaArcos = new ArrayList<Arco>();
			   Arco arco = new Arco(identificador_arco, 0);
			   listaArcos.add((Arco)arco);
			   RESULT = (ArrayList<Arco>)listaArcos;
			:}
		|   ident:identificador_arco comma IDENTS:listaArcos
			{:
			   Arco arco = new Arco(identificador_arco, 0);
			   listaArcos.add((Arco)arco);
			   RESULT = (ArrayList<Arco>)listaArcos;
			:}
		;
IDENTS_WEIGHTED	::= ident:identificador_arco l_paren number:peso r_paren
			{:
			   ArrayList<Arco> listaArcos = new ArrayList<Arco>();
			   Arco arco = new Arco(identificador_arco, peso);
			   listaArcos.add((Arco)arco);
			   RESULT = (ArrayList<Arco>)listaArcos;
			:}
		|   ident:identificador_arco l_paren number:peso r_paren comma IDENTS:listaArcos
			{:
			   Arco arco = new Arco(identificador_arco, peso);
			   listaArcos.add((Arco)arco);
			   RESULT = (ArrayList<Arco>)listaArcos;
			:}
		;
ARCS 		::= ARC:arco
			{: 
			   ArrayList<Arco> listaArcos = new ArrayList<Arco>();
			   listaArcos.add((Arco)arco);
			   RESULT = (ArrayList<Arco>)listaArcos;
			:}
		|   ARC:arco ARCS:listaArcos
			{: 
			   listaArcos.add((Arco)arco);
			   RESULT = (ArrayList<Arco>)listaArcos;
			:}
		;
ARC 		::= ident:id_arco equal ident:id_nodoOrigen connector:tipo ident:id_nodoDestino semicolon 
			{: boolean dirigido = false;
			   if (tipo.equals("->")) dirigido = true;
			   Arco arco = new Arco (id_arco, 0, dirigido, id_nodoOrigen, id_nodoDestino);
			   RESULT = (Arco)arco;
			:}
		;
OPS_GEN 	::= OP5 semicolon
		;
OPS 		::= OP
		|   OP OPS
		;
OP 		::= OP1 semicolon 
		|   OP2 semicolon
		| error
			{: parser.report_error("Error de sintaxis en la zona de operaciones.",null); :}
		;
OP1 		::= operadorUnario   l_paren ident                                                 r_paren
		;
OP2 		::= operadorBinario  l_paren ident comma ident                                     r_paren
		;
OP5 		::= operadorQuinario l_paren ident comma ident comma ident comma ident comma ident r_paren
		;


